<xml xmlns="http://www.w3.org/1999/xhtml"><variables /><block type="pxt-on-start" y="0" x="4"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation numlines="9" line0="enum ToneHzTable {" line1="    do = 262," line2="    re = 294," line3="    mi = 330," line4="    fa = 349," line5="    sol = 392," line6="    la = 440," line7="    si = 494" line8="}" /><field name="LINE0">enum ToneHzTable {</field><field name="LINE1">    do = 262,</field><field name="LINE2">    re = 294,</field><field name="LINE3">    mi = 330,</field><field name="LINE4">    fa = 349,</field><field name="LINE5">    sol = 392,</field><field name="LINE6">    la = 440,</field><field name="LINE7">    si = 494</field><field name="LINE8">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="14" line0="enum BeatList {" line1="    //% block=&quot;1&quot;" line2="    whole_beat = 10," line3="    //% block=&quot;1/2&quot;" line4="    half_beat = 11," line5="    //% block=&quot;1/4&quot;" line6="    quarter_beat = 12," line7="    //% block=&quot;1/8&quot;" line8="    eighth_beat = 13," line9="    //% block=&quot;2&quot;" line10="    double_beat = 14," line11="    //% block=&quot;4&quot;" line12="    breve_beat = 15" line13="}" /><field name="LINE0">enum BeatList {</field><field name="LINE1">    //% block="1"</field><field name="LINE2">    whole_beat = 10,</field><field name="LINE3">    //% block="1/2"</field><field name="LINE4">    half_beat = 11,</field><field name="LINE5">    //% block="1/4"</field><field name="LINE6">    quarter_beat = 12,</field><field name="LINE7">    //% block="1/8"</field><field name="LINE8">    eighth_beat = 13,</field><field name="LINE9">    //% block="2"</field><field name="LINE10">    double_beat = 14,</field><field name="LINE11">    //% block="4"</field><field name="LINE12">    breve_beat = 15</field><field name="LINE13">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="10" line0="enum Patrol{" line1="    //% block=&quot;□□&quot;" line2="    white_white = 1," line3="    //% block=&quot;□■&quot;" line4="    white_black = 2," line5="    //% block=&quot;■□&quot;" line6="    black_white = 3," line7="    //% block=&quot;■■&quot;" line8="    black_black = 4" line9="}" /><field name="LINE0">enum Patrol{</field><field name="LINE1">    //% block="□□"</field><field name="LINE2">    white_white = 1,</field><field name="LINE3">    //% block="□■"</field><field name="LINE4">    white_black = 2,</field><field name="LINE5">    //% block="■□"</field><field name="LINE6">    black_white = 3,</field><field name="LINE7">    //% block="■■"</field><field name="LINE8">    black_black = 4</field><field name="LINE9">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="6" line0="enum PingUnit {" line1="    //% block=&quot;cm&quot;" line2="    Centimeters," line3="    //% block=&quot;μs&quot;" line4="    MicroSeconds" line5="}" /><field name="LINE0">enum PingUnit {</field><field name="LINE1">    //% block="cm"</field><field name="LINE2">    Centimeters,</field><field name="LINE3">    //% block="μs"</field><field name="LINE4">    MicroSeconds</field><field name="LINE5">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="8" line0="enum IRList {" line1="    //% block=&quot;FRONT&quot;" line2="    front = 1," line3="    //% block=&quot;LEFT&quot;" line4="    right = 2," line5="    //% block=&quot;RIGHT&quot;" line6="    left = 3" line7="}" /><field name="LINE0">enum IRList {</field><field name="LINE1">    //% block="FRONT"</field><field name="LINE2">    front = 1,</field><field name="LINE3">    //% block="LEFT"</field><field name="LINE4">    right = 2,</field><field name="LINE5">    //% block="RIGHT"</field><field name="LINE6">    left = 3</field><field name="LINE7">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="22" line0="enum RgbList {" line1="    //% block=&quot;ALL&quot;" line2="    rgb = 9," line3="    //% block=&quot;LED1&quot;" line4="    rgb1 = 0," line5="    //% block=&quot;LED2&quot;" line6="    rgb2 = 1," line7="    //% block=&quot;LED3&quot;" line8="    rgb3 = 2," line9="    //% block=&quot;LED4&quot;" line10="    rgb4 = 3," line11="    //% block=&quot;LED5&quot;" line12="    rgb5 = 4," line13="    //% block=&quot;LED6&quot;" line17="    //% block=&quot;LED8&quot;" line18="    rgb8 = 7," line19="    //% block=&quot;LED9&quot;" line20="    rgb9 = 8" line21="}" line14="    rgb6 = 5," line15="    //% block=&quot;LED7&quot;" line16="    rgb7 = 6," /><field name="LINE0">enum RgbList {</field><field name="LINE1">    //% block="ALL"</field><field name="LINE2">    rgb = 9,</field><field name="LINE3">    //% block="LED1"</field><field name="LINE4">    rgb1 = 0,</field><field name="LINE5">    //% block="LED2"</field><field name="LINE6">    rgb2 = 1,</field><field name="LINE7">    //% block="LED3"</field><field name="LINE8">    rgb3 = 2,</field><field name="LINE9">    //% block="LED4"</field><field name="LINE10">    rgb4 = 3,</field><field name="LINE11">    //% block="LED5"</field><field name="LINE12">    rgb5 = 4,</field><field name="LINE13">    //% block="LED6"</field><field name="LINE14">    rgb6 = 5,</field><field name="LINE15">    //% block="LED7"</field><field name="LINE16">    rgb7 = 6,</field><field name="LINE17">    //% block="LED8"</field><field name="LINE18">    rgb8 = 7,</field><field name="LINE19">    //% block="LED9"</field><field name="LINE20">    rgb9 = 8</field><field name="LINE21">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="22" line0="enum ColorList {" line1="    //% block=&quot;RED&quot;" line2="    red = 1," line3="    //% block=&quot;ORANGE&quot;" line4="    orange = 2," line5="    //% block=&quot;YELLOW&quot;" line6="    yellow = 3," line7="    //% block=&quot;GREEN&quot;" line8="    green = 4," line9="    //% block=&quot;BLUE&quot;" line10="    blue = 5," line11="    //% block=&quot;INDIGO&quot;" line12="    indigo = 6," line13="    //% block=&quot;VIOLET&quot;" line17="    //% block=&quot;WHITE&quot;" line18="    white = 9," line19="    //% block=&quot;BLOCK&quot;" line20="    black = 1" line21="}" line14="    violet = 7," line15="    //% block=&quot;PURPLE&quot;" line16="    purple = 8," /><field name="LINE0">enum ColorList {</field><field name="LINE1">    //% block="RED"</field><field name="LINE2">    red = 1,</field><field name="LINE3">    //% block="ORANGE"</field><field name="LINE4">    orange = 2,</field><field name="LINE5">    //% block="YELLOW"</field><field name="LINE6">    yellow = 3,</field><field name="LINE7">    //% block="GREEN"</field><field name="LINE8">    green = 4,</field><field name="LINE9">    //% block="BLUE"</field><field name="LINE10">    blue = 5,</field><field name="LINE11">    //% block="INDIGO"</field><field name="LINE12">    indigo = 6,</field><field name="LINE13">    //% block="VIOLET"</field><field name="LINE14">    violet = 7,</field><field name="LINE15">    //% block="PURPLE"</field><field name="LINE16">    purple = 8,</field><field name="LINE17">    //% block="WHITE"</field><field name="LINE18">    white = 9,</field><field name="LINE19">    //% block="BLOCK"</field><field name="LINE20">    black = 1</field><field name="LINE21">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="8" line0="enum PinList {" line1="    //% block=&quot;UP&quot;" line2="    up_pull = 1," line3="    //% block=&quot;DOWN&quot;" line4="    down_pull = 2," line5="    //% block=&quot;NONE&quot;" line6="    no_pull = 3" line7="}" /><field name="LINE0">enum PinList {</field><field name="LINE1">    //% block="UP"</field><field name="LINE2">    up_pull = 1,</field><field name="LINE3">    //% block="DOWN"</field><field name="LINE4">    down_pull = 2,</field><field name="LINE5">    //% block="NONE"</field><field name="LINE6">    no_pull = 3</field><field name="LINE7">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="10" line0="enum SENSORS {" line1="    //% block=&quot;MU00&quot;" line2="    MU00," line3="    //% block=&quot;MU01&quot;" line4="    MU01," line5="    //% block=&quot;MU10&quot;" line6="    MU10," line7="    //% block=&quot;MU11&quot;" line8="    MU11" line9="}" /><field name="LINE0">enum SENSORS {</field><field name="LINE1">    //% block="MU00"</field><field name="LINE2">    MU00,</field><field name="LINE3">    //% block="MU01"</field><field name="LINE4">    MU01,</field><field name="LINE5">    //% block="MU10"</field><field name="LINE6">    MU10,</field><field name="LINE7">    //% block="MU11"</field><field name="LINE8">    MU11</field><field name="LINE9">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="6" line0="enum PORT {" line1="    //% blockId=Port_I2C block=&quot;I2C&quot;" line2="    I2C = 1," line3="    //% blockId=Port_Serial block=&quot;Serial&quot;" line4="    Serial = 0," line5="}" /><field name="LINE0">enum PORT {</field><field name="LINE1">    //% blockId=Port_I2C block="I2C"</field><field name="LINE2">    I2C = 1,</field><field name="LINE3">    //% blockId=Port_Serial block="Serial"</field><field name="LINE4">    Serial = 0,</field><field name="LINE5">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="16" line0="enum VISION_TYPE {" line1="    //% block=&quot;Color Detect&quot;" line2="    VISION_COLOR_DETECT = 1," line3="    //% block=&quot;Color Recognize&quot;" line4="    VISION_COLOR_RECOGNITION = 2," line5="    //% block=&quot;Ball Detect&quot;" line6="    VISION_BALL_DETECT = 3," line7="    //% block=&quot;Body Detect&quot;" line8="    VISION_BODY_DETECT = 5," line9="    //% block=&quot;Shape Card&quot;" line10="    VISION_SHAPE_CARD_DETECT = 6," line11="    //% block=&quot;Traffic Card&quot;" line12="    VISION_TRAFFIC_CARD_DETECT = 7," line13="    //% block=&quot;Number Card&quot;" line14="    VISION_NUM_CARD_DETECT = 8" line15="}" /><field name="LINE0">enum VISION_TYPE {</field><field name="LINE1">    //% block="Color Detect"</field><field name="LINE2">    VISION_COLOR_DETECT = 1,</field><field name="LINE3">    //% block="Color Recognize"</field><field name="LINE4">    VISION_COLOR_RECOGNITION = 2,</field><field name="LINE5">    //% block="Ball Detect"</field><field name="LINE6">    VISION_BALL_DETECT = 3,</field><field name="LINE7">    //% block="Body Detect"</field><field name="LINE8">    VISION_BODY_DETECT = 5,</field><field name="LINE9">    //% block="Shape Card"</field><field name="LINE10">    VISION_SHAPE_CARD_DETECT = 6,</field><field name="LINE11">    //% block="Traffic Card"</field><field name="LINE12">    VISION_TRAFFIC_CARD_DETECT = 7,</field><field name="LINE13">    //% block="Number Card"</field><field name="LINE14">    VISION_NUM_CARD_DETECT = 8</field><field name="LINE15">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="14" line0="enum _VISION_TYPE {" line1="    //% block=&quot;olor Detect&quot;" line2="    VISION_COLOR_DETECT = 1," line3="    //% block=&quot;Ball Detect&quot;" line4="    VISION_BALL_DETECT = 3," line5="    //% block=&quot;Body Detect&quot;" line6="    VISION_BODY_DETECT = 5," line7="    //% block=&quot;Shape Card&quot;" line8="    VISION_SHAPE_CARD_DETECT = 6," line9="    //% block=&quot;Traffic Card&quot;" line10="    VISION_TRAFFIC_CARD_DETECT = 7," line11="    //% block=&quot;Number Card&quot;" line12="    VISION_NUM_CARD_DETECT = 8" line13="}" /><field name="LINE0">enum _VISION_TYPE {</field><field name="LINE1">    //% block="olor Detect"</field><field name="LINE2">    VISION_COLOR_DETECT = 1,</field><field name="LINE3">    //% block="Ball Detect"</field><field name="LINE4">    VISION_BALL_DETECT = 3,</field><field name="LINE5">    //% block="Body Detect"</field><field name="LINE6">    VISION_BODY_DETECT = 5,</field><field name="LINE7">    //% block="Shape Card"</field><field name="LINE8">    VISION_SHAPE_CARD_DETECT = 6,</field><field name="LINE9">    //% block="Traffic Card"</field><field name="LINE10">    VISION_TRAFFIC_CARD_DETECT = 7,</field><field name="LINE11">    //% block="Number Card"</field><field name="LINE12">    VISION_NUM_CARD_DETECT = 8</field><field name="LINE13">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="8" line0="enum CARD_TYPE {" line1="    //% block=&quot;Shape Card&quot;" line2="    VISION_SHAPE_CARD_DETECT = 6," line3="    //% block=&quot;Traffic Card&quot;" line4="    VISION_TRAFFIC_CARD_DETECT," line5="    //% block=&quot;Number Card&quot;" line6="    VISION_NUM_CARD_DETECT" line7="}" /><field name="LINE0">enum CARD_TYPE {</field><field name="LINE1">    //% block="Shape Card"</field><field name="LINE2">    VISION_SHAPE_CARD_DETECT = 6,</field><field name="LINE3">    //% block="Traffic Card"</field><field name="LINE4">    VISION_TRAFFIC_CARD_DETECT,</field><field name="LINE5">    //% block="Number Card"</field><field name="LINE6">    VISION_NUM_CARD_DETECT</field><field name="LINE7">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="12" line0="enum TRAFFIC_CARD_TYPE {" line1="    //% block=&quot;Forward&quot;" line2="    TRAFFIC_CARD_FORWARD = 1," line3="    //% block=&quot;Left&quot;" line4="    TRAFFIC_CARD_LEFT," line5="    //% block=&quot;Right&quot;" line6="    TRAFFIC_CARD_RIGHT," line7="    //% block=&quot;Turn Around&quot;" line8="    TRAFFIC_CARD_TURN_AROUND," line9="    //% block=&quot;Stop&quot;" line10="    TRAFFIC_CARD_PARK" line11="}" /><field name="LINE0">enum TRAFFIC_CARD_TYPE {</field><field name="LINE1">    //% block="Forward"</field><field name="LINE2">    TRAFFIC_CARD_FORWARD = 1,</field><field name="LINE3">    //% block="Left"</field><field name="LINE4">    TRAFFIC_CARD_LEFT,</field><field name="LINE5">    //% block="Right"</field><field name="LINE6">    TRAFFIC_CARD_RIGHT,</field><field name="LINE7">    //% block="Turn Around"</field><field name="LINE8">    TRAFFIC_CARD_TURN_AROUND,</field><field name="LINE9">    //% block="Stop"</field><field name="LINE10">    TRAFFIC_CARD_PARK</field><field name="LINE11">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="12" line0="enum SHAPE_CARD_TYPE {" line1="    //% block=&quot;tick&quot;" line2="    SHAPE_CARD_TICK = 1," line3="    //% block=&quot;cross&quot;" line4="    SHAPE_CARD_CROSS," line5="    //% block=&quot;circle&quot;" line6="    SHAPE_CARD_CIRCLE," line7="    //% block=&quot;square&quot;" line8="    SHAPE_CARD_SQUARE," line9="    //% block=&quot;triangle&quot;" line10="    SHAPE_CARD_TRIANGLE" line11="}" /><field name="LINE0">enum SHAPE_CARD_TYPE {</field><field name="LINE1">    //% block="tick"</field><field name="LINE2">    SHAPE_CARD_TICK = 1,</field><field name="LINE3">    //% block="cross"</field><field name="LINE4">    SHAPE_CARD_CROSS,</field><field name="LINE5">    //% block="circle"</field><field name="LINE6">    SHAPE_CARD_CIRCLE,</field><field name="LINE7">    //% block="square"</field><field name="LINE8">    SHAPE_CARD_SQUARE,</field><field name="LINE9">    //% block="triangle"</field><field name="LINE10">    SHAPE_CARD_TRIANGLE</field><field name="LINE11">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="18" line0="enum LED_COLOR_TYPE {" line1="    //% block=&quot;off&quot;" line2="    LED_BLACK = 0," line3="    //% block=&quot;red&quot;" line4="    LED_RED," line5="    //% block=&quot;green&quot;" line6="    LED_GREEN," line7="    //% block=&quot;blue&quot;" line8="    LED_BLUE," line9="    //% block=&quot;yellow&quot;" line10="    LED_YELLOW," line11="    //% block=&quot;purple&quot;" line12="    LED_PURPLE," line13="    //% block=&quot;cayan&quot;" line17="}" line14="    LED_CYAN," line15="    //% block=&quot;white&quot;" line16="    LED_WHITE" /><field name="LINE0">enum LED_COLOR_TYPE {</field><field name="LINE1">    //% block="off"</field><field name="LINE2">    LED_BLACK = 0,</field><field name="LINE3">    //% block="red"</field><field name="LINE4">    LED_RED,</field><field name="LINE5">    //% block="green"</field><field name="LINE6">    LED_GREEN,</field><field name="LINE7">    //% block="blue"</field><field name="LINE8">    LED_BLUE,</field><field name="LINE9">    //% block="yellow"</field><field name="LINE10">    LED_YELLOW,</field><field name="LINE11">    //% block="purple"</field><field name="LINE12">    LED_PURPLE,</field><field name="LINE13">    //% block="cayan"</field><field name="LINE14">    LED_CYAN,</field><field name="LINE15">    //% block="white"</field><field name="LINE16">    LED_WHITE</field><field name="LINE17">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="20" line0="enum COLOR_TYPE {" line1="    //% block=&quot;black&quot;" line2="    BLACK = 1," line3="    //% block=&quot;white&quot;" line4="    WHITE," line5="    //% block=&quot;red&quot;" line6="    RED," line7="    //% block=&quot;yellow&quot;" line8="    YELLOW," line9="    //% block=&quot;green&quot;" line10="    GREEN," line11="    //% block=&quot;cayan&quot;" line12="    CYAN," line13="    //% block=&quot;blue&quot;" line17="    //% block=&quot;others&quot;" line18="    UNKOWN = 0" line19="}" line14="    BLUE," line15="    //% block=&quot;purple&quot;" line16="    PURPLE," /><field name="LINE0">enum COLOR_TYPE {</field><field name="LINE1">    //% block="black"</field><field name="LINE2">    BLACK = 1,</field><field name="LINE3">    //% block="white"</field><field name="LINE4">    WHITE,</field><field name="LINE5">    //% block="red"</field><field name="LINE6">    RED,</field><field name="LINE7">    //% block="yellow"</field><field name="LINE8">    YELLOW,</field><field name="LINE9">    //% block="green"</field><field name="LINE10">    GREEN,</field><field name="LINE11">    //% block="cayan"</field><field name="LINE12">    CYAN,</field><field name="LINE13">    //% block="blue"</field><field name="LINE14">    BLUE,</field><field name="LINE15">    //% block="purple"</field><field name="LINE16">    PURPLE,</field><field name="LINE17">    //% block="others"</field><field name="LINE18">    UNKOWN = 0</field><field name="LINE19">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="22" line0="enum NUM_CARD_TYPE {" line1="    //% block=&quot;1&quot;" line2="    NUM_CARD_1 = 1," line3="    //% block=&quot;2&quot;" line4="    NUM_CARD_2," line5="    //% block=&quot;3&quot;" line6="    NUM_CARD_3," line7="    //% block=&quot;4&quot;" line8="    NUM_CARD_4," line9="    //% block=&quot;5&quot;" line10="    NUM_CARD_5," line11="    //% block=&quot;6&quot;" line12="    NUM_CARD_6," line13="    //% block=&quot;7&quot;" line17="    //% block=&quot;9&quot;" line18="    NUM_CARD_9," line19="    //% block=&quot;0&quot;" line20="    NUM_CARD_0," line21="}" line14="    NUM_CARD_7," line15="    //% block=&quot;8&quot;" line16="    NUM_CARD_8," /><field name="LINE0">enum NUM_CARD_TYPE {</field><field name="LINE1">    //% block="1"</field><field name="LINE2">    NUM_CARD_1 = 1,</field><field name="LINE3">    //% block="2"</field><field name="LINE4">    NUM_CARD_2,</field><field name="LINE5">    //% block="3"</field><field name="LINE6">    NUM_CARD_3,</field><field name="LINE7">    //% block="4"</field><field name="LINE8">    NUM_CARD_4,</field><field name="LINE9">    //% block="5"</field><field name="LINE10">    NUM_CARD_5,</field><field name="LINE11">    //% block="6"</field><field name="LINE12">    NUM_CARD_6,</field><field name="LINE13">    //% block="7"</field><field name="LINE14">    NUM_CARD_7,</field><field name="LINE15">    //% block="8"</field><field name="LINE16">    NUM_CARD_8,</field><field name="LINE17">    //% block="9"</field><field name="LINE18">    NUM_CARD_9,</field><field name="LINE19">    //% block="0"</field><field name="LINE20">    NUM_CARD_0,</field><field name="LINE21">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="10" line0="enum VisionLevel {" line1="    //% block=&quot;Auto&quot;" line2="    LEVEL_AUTO = 0," line3="    //% block=&quot;Speed&quot;" line4="    LEVEL_HIGH_SPEED," line5="    //% block=&quot;Balance&quot;" line6="    LEVEL_NORMAL," line7="    //% block=&quot;Accuracy&quot;" line8="    LEVEL_HIGH_ACCURACY" line9="}" /><field name="LINE0">enum VisionLevel {</field><field name="LINE1">    //% block="Auto"</field><field name="LINE2">    LEVEL_AUTO = 0,</field><field name="LINE3">    //% block="Speed"</field><field name="LINE4">    LEVEL_HIGH_SPEED,</field><field name="LINE5">    //% block="Balance"</field><field name="LINE6">    LEVEL_NORMAL,</field><field name="LINE7">    //% block="Accuracy"</field><field name="LINE8">    LEVEL_HIGH_ACCURACY</field><field name="LINE9">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="14" line0="enum VisionZoom {" line1="    //% block=&quot;Auto&quot;" line2="    Default," line3="    //% block=&quot;Level1&quot;" line4="    LEVEL_1," line5="    //% block=&quot;Level2&quot;" line6="    LEVEL_2," line7="    //% block=&quot;Level3&quot;" line8="    LEVEL_3," line9="    //% block=&quot;Level4&quot;" line10="    LEVEL_4," line11="    //% block=&quot;Level5&quot;" line12="    LEVEL_5" line13="}" /><field name="LINE0">enum VisionZoom {</field><field name="LINE1">    //% block="Auto"</field><field name="LINE2">    Default,</field><field name="LINE3">    //% block="Level1"</field><field name="LINE4">    LEVEL_1,</field><field name="LINE5">    //% block="Level2"</field><field name="LINE6">    LEVEL_2,</field><field name="LINE7">    //% block="Level3"</field><field name="LINE8">    LEVEL_3,</field><field name="LINE9">    //% block="Level4"</field><field name="LINE10">    LEVEL_4,</field><field name="LINE11">    //% block="Level5"</field><field name="LINE12">    LEVEL_5</field><field name="LINE13">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="18" line0="enum BaudRate2 {" line1="    //% block=&quot;9600&quot;" line2="    BR_9600 = 0," line3="    //% block=&quot;19200&quot;" line4="    BR_19200," line5="    //% block=&quot;38400&quot;" line6="    BR_38400," line7="    //% block=&quot;57600&quot;" line8="    BR_57600," line9="    //% block=&quot;115200&quot;" line10="    BR_115200," line11="    //% block=&quot;230400&quot;" line12="    BR_230400," line13="    //% block=&quot;460800&quot;" line17="}" line14="    BR_460800," line15="    //% block=&quot;921600&quot;" line16="    BR_921600" /><field name="LINE0">enum BaudRate2 {</field><field name="LINE1">    //% block="9600"</field><field name="LINE2">    BR_9600 = 0,</field><field name="LINE3">    //% block="19200"</field><field name="LINE4">    BR_19200,</field><field name="LINE5">    //% block="38400"</field><field name="LINE6">    BR_38400,</field><field name="LINE7">    //% block="57600"</field><field name="LINE8">    BR_57600,</field><field name="LINE9">    //% block="115200"</field><field name="LINE10">    BR_115200,</field><field name="LINE11">    //% block="230400"</field><field name="LINE12">    BR_230400,</field><field name="LINE13">    //% block="460800"</field><field name="LINE14">    BR_460800,</field><field name="LINE15">    //% block="921600"</field><field name="LINE16">    BR_921600</field><field name="LINE17">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="10" line0="enum WBMODE {" line1="    //% block=&quot;Auto&quot;" line2="    WB_AUTO," line3="    //% block=&quot;Lock&quot;" line4="    WB_LOCK," line5="    //% block=&quot;white&quot;" line6="    WB_WHITE," line7="    //% block=&quot;yellow&quot;" line8="    WB_WARM" line9="}" /><field name="LINE0">enum WBMODE {</field><field name="LINE1">    //% block="Auto"</field><field name="LINE2">    WB_AUTO,</field><field name="LINE3">    //% block="Lock"</field><field name="LINE4">    WB_LOCK,</field><field name="LINE5">    //% block="white"</field><field name="LINE6">    WB_WHITE,</field><field name="LINE7">    //% block="yellow"</field><field name="LINE8">    WB_WARM</field><field name="LINE9">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="12" line0="enum Params {" line1="    //% block=&quot;x position&quot;" line2="    X_POS = 1," line3="    //% block=&quot;y position&quot;" line4="    Y_POS," line5="    //% block=&quot;width&quot;" line6="    WIDTH," line7="    //% block=&quot;height&quot;" line8="    HEIGHT," line9="    //% block=&quot;label&quot;" line10="    LABLE" line11="}" /><field name="LINE0">enum Params {</field><field name="LINE1">    //% block="x position"</field><field name="LINE2">    X_POS = 1,</field><field name="LINE3">    //% block="y position"</field><field name="LINE4">    Y_POS,</field><field name="LINE5">    //% block="width"</field><field name="LINE6">    WIDTH,</field><field name="LINE7">    //% block="height"</field><field name="LINE8">    HEIGHT,</field><field name="LINE9">    //% block="label"</field><field name="LINE10">    LABLE</field><field name="LINE11">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="10" line0="enum ColorParams {" line1="    //% block=&quot;red channel&quot;" line2="    Red_channal = 1," line3="    //% block=&quot;grenn channel&quot;" line4="    Green_channal," line5="    //% block=&quot;blue channel&quot;" line6="    Blue_channal," line7="    //% block=&quot;label&quot;" line8="    LABLE" line9="}" /><field name="LINE0">enum ColorParams {</field><field name="LINE1">    //% block="red channel"</field><field name="LINE2">    Red_channal = 1,</field><field name="LINE3">    //% block="grenn channel"</field><field name="LINE4">    Green_channal,</field><field name="LINE5">    //% block="blue channel"</field><field name="LINE6">    Blue_channal,</field><field name="LINE7">    //% block="label"</field><field name="LINE8">    LABLE</field><field name="LINE9">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="6" line0="enum DIR {" line1="    //%blockId=DIR_X block=&quot;X&quot;" line2="    X = 0," line3="    //%blockId=DIR_Y block=&quot;Y&quot;" line4="    Y" line5="}" /><field name="LINE0">enum DIR {</field><field name="LINE1">    //%blockId=DIR_X block="X"</field><field name="LINE2">    X = 0,</field><field name="LINE3">    //%blockId=DIR_Y block="Y"</field><field name="LINE4">    Y</field><field name="LINE5">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="6" line0="enum LEDS {" line1="    //% block=&quot;1&quot;" line2="    LED1 = 0," line3="    //% block=&quot;2&quot;" line4="    LED2" line5="}" /><field name="LINE0">enum LEDS {</field><field name="LINE1">    //% block="1"</field><field name="LINE2">    LED1 = 0,</field><field name="LINE3">    //% block="2"</field><field name="LINE4">    LED2</field><field name="LINE5">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="6" line0="enum ENABLES {" line1="    //% block=&quot;Enable&quot;" line2="    enable = 1," line3="    //% block=&quot;Disable&quot;" line4="    disable = 0" line5="}" /><field name="LINE0">enum ENABLES {</field><field name="LINE1">    //% block="Enable"</field><field name="LINE2">    enable = 1,</field><field name="LINE3">    //% block="Disable"</field><field name="LINE4">    disable = 0</field><field name="LINE5">}</field><next><block type="typescript_statement" editable="false"><mutation numlines="449" line0="namespace CruiseBit {" line1="" line2="    let neoStrip = neopixel.create(DigitalPin.P1, 9, NeoPixelMode.RGB);" line3="" line4="    /**" line5="     * 设置电机" line6="     */" line7="&#9;//% blockId=&quot;cruise_motor&quot; block=&quot;Set DC Motor Left Speed%leftSpeed| Right Speed%rightSpeed| for%time&quot;" line8="" line9="" line10="    //% leftSpeed.min=-1023 leftSpeed.max=1023" line11="    //% rightSpeed.min=-1023 rightSpeed.max=1023" line12="    //% weight=100" line13="    export function motorRun(leftSpeed: number, rightSpeed: number, time: number): void {" line17="        }" line18="" line19="        let rightRotation = 1;" line20="        if(rightSpeed &lt; 0){" line21="            rightRotation = 0;" line14="        let leftRotation = 1;" line15="        if(leftSpeed &lt; 0){" line16="            leftRotation = 0;" line327="    */" line328="    //% blockId=mu_init block=&quot;Init%id|Interface%port&quot;" line329="    //% weight=100 " line330="    //% shim=muvs::begin" line331="    //% group=&quot;Settings&quot;" line332="    export function begin(id: SENSORS, port: PORT) {" line333="        return" line334="    }" line335="    //% blockId=MU_reset block=&quot;%id|Reset to Default&quot;" line336="    //% weight=99" line337="    //% shim=muvs::reset" line338="    //% group=&quot;Settings&quot;" line339="    export function reset(id: SENSORS) {" line340="        return" line341="    }" line342="" line343="    //% blockId=MU_set_led block=&quot;%id|LED %led|when detect %detected_color|when undetect %undetected_color&quot;" line344="    //% level.defl=1 level.min=0 level.max=15" line345="    //% weight=98 inlineInputMode=inline" line346="    //% shim=muvs::set_led" line347="    //% group=&quot;Settings&quot; advanced=true" line348="    export function set_led(id: SENSORS, led: LEDS, detected_color: LED_COLOR_TYPE, undetected_color: LED_COLOR_TYPE) {" line349="        return" line350="    }" line351="" line352="    //% blockId=MU_VisionBegin block=&quot;%id|%enable|Algorithm%type&quot;" line353="    //% weight=97" line354="    //% shim=muvs::VisionBegin" line355="    //% group=&quot;Settings&quot;" line356="    export function VisionBegin(id: SENSORS, enable: ENABLES, type: VISION_TYPE) {" line357="        return" line358="    }" line359="    //% blockId=MU_set_level block=&quot;%id|Set Algorithm%VISION_TYPE|Level%level&quot;" line360="    //% weight=96" line361="    //% shim=muvs::set_level" line362="    //% group=&quot;Settings&quot; advanced=true" line363="    export function set_level(id: SENSORS, type: VISION_TYPE, level: VisionLevel) {" line364="        return" line365="    }" line366="    //% blockId=MU_set_zoom block=&quot;%id|Digital Zoom%level&quot;" line367="    //% weight=95" line368="    //% shim=muvs::set_zoom" line369="    //% group=&quot;Settings&quot; advanced=true" line370="    export function set_zoom(id: SENSORS, level: VisionZoom) {" line371="        return" line372="    }" line373="" line374="    //% blockId=MU_set_baudrate block=&quot;%id|Set Baudrate%baudrate&quot;" line375="    //% weight=94" line376="    //% shim=muvs::set_baudrate" line377="    //% group=&quot;Settings&quot; advanced=true" line378="    export function set_baudrate(id: SENSORS, baud: BaudRate2) {" line379="        return" line380="    }" line381="    //% blockId=MU_set_awb block=&quot;%id|Set white balance%level&quot;" line382="    //% weight=93" line383="    //% shim=muvs::set_WB" line384="    //% group=&quot;Settings&quot; advanced=true" line385="    export function set_WB(id: SENSORS, awb: WBMODE) {" line386="        return" line387="    }" line388="    //% block=&quot;%id|High FPS mode$on&quot;" line389="    //% shim=muvs::onOff" line390="    //% on.shadow=&quot;toggleOnOff&quot; group=&quot;Settings&quot; advanced=true" line391="    export function onOff(id: SENSORS, on: boolean) {" line392="        return" line393="    }" line394="    //% block=&quot;%id|Is detected%type&quot; color=&quot;#2E8B57&quot;" line395="    //% shim=muvs::detected" line396="    //% group=&quot;Functions&quot;" line397="    export function detected(id: SENSORS, type: VISION_TYPE): boolean {" line398="        return true" line399="    }" line400="    //% block=&quot;%id|Is detected  Color Recognize x=%x|y=%y&quot; color=&quot;#2E8B57&quot;" line401="    //% shim=muvs::MuVs2GetColorRCGLabel" line402="    //% group=&quot;Functions&quot;" line403="    export function MuVs2GetColorRCGLabel(id: SENSORS, x: number, y: number): boolean {" line404="        return true" line405="    }" line406="    //% block=&quot;%id|Is detected  Color Detect Color=%color&quot; color=&quot;#2E8B57&quot;" line407="    //% shim=muvs::MuVs2GetColorDetectLabel" line408="    //% group=&quot;Functions&quot;" line409="    export function MuVs2GetColorDetectLabel(id: SENSORS, label: COLOR_TYPE): boolean {" line410="        return true" line411="    }" line412="    //% block=&quot;Get%id|Algorithm%type|%item&quot; color=&quot;#2E8B57&quot;" line413="    //% shim=muvs::get_value" line414="    //% group=&quot;Functions&quot;" line415="    export function get_value(id: SENSORS, type: _VISION_TYPE, item: Params): number {" line416="        return 0" line417="    }" line418="    //% block=&quot;Get%id| Color Recognize|%item&quot; color=&quot;#2E8B57&quot;" line419="    //% shim=muvs::get_color_value" line420="    //% group=&quot;Functions&quot;" line421="    export function get_color_value(id: SENSORS, item: ColorParams): number {" line422="        return 0" line423="    }" line424="    //% block=&quot;Get%id| Shape Card =%type&quot; color=&quot;#2E8B57&quot;" line425="    //% shim=muvs::get_shape_card_type" line426="    //% group=&quot;Functions&quot;" line427="    export function get_shape_card_type(id: SENSORS, type: SHAPE_CARD_TYPE): boolean {" line428="        return true" line429="    }" line430="    //% block=&quot;Get%id| Traffic Card =%type&quot; color=&quot;#2E8B57&quot;" line431="    //% shim=muvs::get_traffic_card_type" line432="    //% group=&quot;Functions&quot;" line433="    export function get_traffic_card_type(id: SENSORS, type: TRAFFIC_CARD_TYPE): boolean {" line434="        return true" line435="    }" line436="    //% block=&quot;Get%id| Number Card =%type&quot; color=&quot;#2E8B57&quot;" line437="    //% shim=muvs::get_number_card_type" line438="    //% group=&quot;Functions&quot;" line439="    export function get_number_card_type(id: SENSORS, type: NUM_CARD_TYPE): boolean {" line440="        return true" line441="    }" line442="    //% block=&quot;Get%id|Algorithm  Color Recognize color =%color&quot; color=&quot;#2E8B57&quot;" line443="    //% shim=muvs::get_color_recognize" line444="    //% group=&quot;Functions&quot;" line445="    export function get_color_recognize(id: SENSORS, color: COLOR_TYPE): boolean {" line446="        return true" line447="    }" line448="}" line43="        pins.digitalWritePin(DigitalPin.P13, 0);" line44="        //右电机 M2" line45="        pins.analogWritePin(AnalogPin.P16, 0);" line46="        pins.digitalWritePin(DigitalPin.P15, 0);" line47="        " line48="        " line49="    }" line50="" line51="    /**" line52="     * 播放音调" line53="     */" line54="    //% weight=89" line55="    //% blockId=&quot;cruise_tone&quot; block=&quot;Play Tone %tone| for %beatInfo&quot;" line56="    export function myPlayTone(tone:ToneHzTable, beatInfo:BeatList): void {" line57="" line58="        if(beatInfo == BeatList.whole_beat){" line59="            music.playTone(tone, music.beat(BeatFraction.Whole));" line60="" line61="        }" line62="       " line63="        if(beatInfo == BeatList.half_beat){" line64="            music.playTone(tone, music.beat(BeatFraction.Half));" line65="" line66="        }" line67="        " line68="        if(beatInfo == BeatList.quarter_beat){" line69="            music.playTone(tone, music.beat(BeatFraction.Quarter));" line70="" line71="        }" line72="" line73="        if(beatInfo == BeatList.double_beat){" line74="            music.playTone(tone, music.beat(BeatFraction.Double));" line75="" line76="        }" line77="" line78="        " line79="        if(beatInfo == BeatList.eighth_beat){" line80="            music.playTone(tone, music.beat(BeatFraction.Eighth));" line81="" line82="        }" line83="" line84="        if(beatInfo == BeatList.breve_beat){" line85="            music.playTone(tone, music.beat(BeatFraction.Breve));" line86="" line87="        }" line88="        //1、16不行" line89="        // if(beatInfo == BeatList.sixteen_beat){" line90="        //     music.playTone(tone, music.beat(BeatFraction.SixTeenth));" line91="" line92="        // }    " line93="    }" line94="" line95="    //% weight=79" line96="    //% blockId=&quot;cruise_patrol&quot; block=&quot;Line Tracer Detects %patrol&quot;" line97="    export function readPatrol(patrol:Patrol): boolean {" line98="" line99="        // let p1 = pins.digitalReadPin(DigitalPin.P12);" line100="        // let p2 = pins.digitalReadPin(DigitalPin.P11);" line101="" line102="        if(patrol == Patrol.white_white){" line103="            if(pins.digitalReadPin(DigitalPin.P12) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P11) == 1){" line104="                return true;" line105="            }else{" line106="                return false;" line107="            }" line108="        }else if(patrol == Patrol.white_black){" line109="            if(pins.digitalReadPin(DigitalPin.P12) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P11) == 0){" line110="                return true;" line111="            }else{" line112="                return false;" line113="            }" line114="        }else if(patrol == Patrol.black_white){" line115="            if(pins.digitalReadPin(DigitalPin.P12) == 0 &amp;&amp; pins.digitalReadPin(DigitalPin.P11) == 1){" line116="                return true;" line117="            }else{" line118="                return false;" line119="            }" line120="        }else if(patrol == Patrol.black_black){" line121="            if(pins.digitalReadPin(DigitalPin.P12) == 0 &amp;&amp; pins.digitalReadPin(DigitalPin.P11) == 0){" line122="                return true;" line123="            }else{" line124="                return false;" line125="            }" line126="        }else{" line127="            return false;" line128="        }" line129="    }" line130="" line131="    //% blockId=cruise_sensor block=&quot;Ultrasonic Distance %unit&quot;" line132="    //% weight=69" line133="    export function sensorDistance(unit: PingUnit, maxCmDistance = 500): number {" line134="        // send pulse" line135="        //pins.setPull(DigitalPin.P2, PinPullMode.PullNone);" line136="        //pins.setPull(DigitalPin.P2, PinPullMode.PullUp);" line137="        //pins.setPull(DigitalPin.P5, PinPullMode.PullUp);" line138="" line139="        //pins.digitalWritePin(DigitalPin.P2, 0);" line140="        //control.waitMicros(4);" line141="        //pins.digitalWritePin(DigitalPin.P2, 1);" line142="        //control.waitMicros(10);" line143="        //pins.digitalWritePin(DigitalPin.P2, 0);" line144="        " line145="        // read pulse" line146="        //let d = pins.pulseIn(DigitalPin.P5, PulseValue.High, maxCmDistance * 58);" line147="        //console.log(&quot;Distance: &quot; + d/58);" line148="        " line149="        //basic.pause(50)" line150="" line151="        //switch (unit) {" line152="            //case PingUnit.Centimeters: return d / 58;" line153="            //default: return d ;" line154="        //}" line155="" line156="         // send pulse" line157="         pins.setPull(DigitalPin.P2, PinPullMode.PullNone);" line158="         pins.digitalWritePin(DigitalPin.P2, 0);" line159="         control.waitMicros(2);" line160="         pins.digitalWritePin(DigitalPin.P2, 1);" line161="         control.waitMicros(10);" line162="         pins.digitalWritePin(DigitalPin.P2, 0);" line163=" " line164="         // read pulse" line165="         const d = pins.pulseIn(DigitalPin.P2, PulseValue.High, maxCmDistance * 58);" line166=" " line167="         switch (unit) {" line168="             case PingUnit.Centimeters: return Math.idiv(d, 58);" line169="             default: return d ;" line170=" }" line171="    }" line172="" line173="" line174="    /**" line175="      * 红外线探测左、前、右是否有障碍物" line176="      */" line177="    //% blockId=&quot;cruise_IR&quot; block=&quot;%IRDire| Obstacle&quot;" line178="    //% weight=68" line179="    export function cruiseIR(IRDire:IRList): boolean {" line180="        if(IRDire == IRList.front){" line181="            if(pins.digitalReadPin(DigitalPin.P5) == 0){" line182="                return true;" line183="            }else{" line184="                return false;" line185="            }" line186="        }else if(IRDire == IRList.left){" line187="            if(pins.digitalReadPin(DigitalPin.P8) == 0){" line188="                return true;" line189="            }else{" line190="                return false;" line191="            }" line192="        }else if(IRDire == IRList.right){" line193="            if(pins.digitalReadPin(DigitalPin.P2) == 0){" line194="                return true;" line195="            }else{" line196="                return false;" line197="            }" line198="        }else{" line199="            return false;" line200="        }" line201="    }" line202="" line203="    //% blockId=cruise_rgb block=&quot;Set LED %RgbValue| Colour %ColorValue&quot;" line204="    //% weight=59" line205="    export function setRGB(RgbValue: RgbList, ColorValue:ColorList): void {" line206="        " line207="        if(ColorValue == ColorList.red){" line208="            if(RgbValue == RgbList.rgb){" line209="                neoStrip.showColor(neopixel.colors(NeoPixelColors.Red));" line210="            }else{" line211="                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Red));" line212="            }" line213="            " line214="        }" line215="        " line216="        if(ColorValue == ColorList.orange){" line217="            if(RgbValue == RgbList.rgb){" line218="                neoStrip.showColor(neopixel.colors(NeoPixelColors.Orange));" line219="            }else{" line220="                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Orange));" line221="            }" line222="        }" line223="        " line224="        if(ColorValue == ColorList.yellow){" line225="            if(RgbValue == RgbList.rgb){" line226="                neoStrip.showColor(neopixel.colors(NeoPixelColors.Yellow));" line227="            }else{" line228="                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Yellow));" line229="            }" line230="        }" line231="        " line232="        if(ColorValue == ColorList.green){" line233="            if(RgbValue == RgbList.rgb){" line234="                neoStrip.showColor(neopixel.colors(NeoPixelColors.Green));" line235="            }else{" line236="                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Green));" line237="            }" line238="        }" line239="        " line240="        if(ColorValue == ColorList.blue){" line241="            if(RgbValue == RgbList.rgb){" line242="                neoStrip.showColor(neopixel.colors(NeoPixelColors.Blue));" line243="            }else{" line244="                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Blue));" line245="            }" line246="        }" line247="        " line248="        if(ColorValue == ColorList.indigo){" line249="            if(RgbValue == RgbList.rgb){" line250="                neoStrip.showColor(neopixel.colors(NeoPixelColors.Indigo));" line251="            }else{" line252="                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Indigo));" line253="            }" line254="        }" line255="        " line256="        if(ColorValue == ColorList.violet){" line257="            if(RgbValue == RgbList.rgb){" line258="                neoStrip.showColor(neopixel.colors(NeoPixelColors.Violet));" line259="            }else{" line260="                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Violet));" line261="            }" line262="        }" line263="        " line264="        if(ColorValue == ColorList.purple){" line265="            if(RgbValue == RgbList.rgb){" line266="                neoStrip.showColor(neopixel.colors(NeoPixelColors.Purple));" line267="            }else{" line268="                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Purple));" line269="            }" line270="        }" line271="        " line272="        if(ColorValue == ColorList.white){" line273="            if(RgbValue == RgbList.rgb){" line274="                neoStrip.showColor(neopixel.colors(NeoPixelColors.White));" line275="            }else{" line276="                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.White));" line277="            }" line278="        }" line279="        " line280="        if(ColorValue == ColorList.black){" line281="            if(RgbValue == RgbList.rgb){" line282="                neoStrip.showColor(neopixel.colors(NeoPixelColors.Black));" line283="            }else{" line284="                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Black));" line285="            }" line286="        }" line287="" line288="        neoStrip.show();" line289="        " line290="    }" line291="" line292="   /**" line293="     * Clear leds." line294="     */" line295="   //% blockId=&quot;cruise_neo_clear&quot; block=&quot;Clear all&quot;" line296="   //% weight=55" line297="   export function neoClear(): void {" line298="       neoStrip.showColor(neopixel.colors(NeoPixelColors.Black));" line299="   }" line300="" line301="    /**" line302="      * Shows a rainbow pattern on all LEDs." line303="      */" line304="    //% blockId=&quot;cruise_neo_rainbow&quot; block=&quot;Show Rainbow&quot;" line305="    //% weight=70" line306="    export function neoRainbow(): void {" line307="        neoStrip.showRainbow(1, 360);" line308="    }" line309="" line310="     //% blockId=tape_rgb block=&quot;Set Pull Pin %pin| to %way&quot;" line311="    //% weight=49" line312="    export function setTapeLights(pin: DigitalPin, way: PinList): void {" line313="" line314="        if(way = PinList.up_pull){" line315="            pins.setPull(pin, PinPullMode.PullUp);" line316="        }else if(way = PinList.down_pull){" line317="            pins.setPull(pin, PinPullMode.PullDown);" line318="        }else{" line319="            pins.setPull(pin, PinPullMode.PullNone);" line320="        }" line321="" line322="        " line323="        " line324="}" line325="    /**" line326="    * Help goes here." line27="" line28="        //右电机 M2" line29="        pins.analogWritePin(AnalogPin.P16, Math.abs(rightSpeed));" line30="        pins.digitalWritePin(DigitalPin.P15, rightRotation);" line31="" line32="        //添加时间控制" line33="        if(time &lt; 0){" line34="            time = 0;" line35="        }" line36="        " line37="        let time_num = time*1000000;" line38="" line39="        control.waitMicros(time_num);" line40="" line41="        //左电机 M1" line42="        pins.analogWritePin(AnalogPin.P14, 0);" line22="        }" line23="        " line24="       //左电机 M1" line25="        pins.analogWritePin(AnalogPin.P14, Math.abs(leftSpeed));" line26="        pins.digitalWritePin(DigitalPin.P13, leftRotation);" /><field name="LINE0">namespace CruiseBit {</field><field name="LINE1" /><field name="LINE2">    let neoStrip = neopixel.create(DigitalPin.P1, 9, NeoPixelMode.RGB);</field><field name="LINE3" /><field name="LINE4">    /**</field><field name="LINE5">     * 设置电机</field><field name="LINE6">     */</field><field name="LINE7">	//% blockId="cruise_motor" block="Set DC Motor Left Speed%leftSpeed| Right Speed%rightSpeed| for%time"</field><field name="LINE8" /><field name="LINE9" /><field name="LINE10">    //% leftSpeed.min=-1023 leftSpeed.max=1023</field><field name="LINE11">    //% rightSpeed.min=-1023 rightSpeed.max=1023</field><field name="LINE12">    //% weight=100</field><field name="LINE13">    export function motorRun(leftSpeed: number, rightSpeed: number, time: number): void {</field><field name="LINE14">        let leftRotation = 1;</field><field name="LINE15">        if(leftSpeed &lt; 0){</field><field name="LINE16">            leftRotation = 0;</field><field name="LINE17">        }</field><field name="LINE18" /><field name="LINE19">        let rightRotation = 1;</field><field name="LINE20">        if(rightSpeed &lt; 0){</field><field name="LINE21">            rightRotation = 0;</field><field name="LINE22">        }</field><field name="LINE23">        </field><field name="LINE24">       //左电机 M1</field><field name="LINE25">        pins.analogWritePin(AnalogPin.P14, Math.abs(leftSpeed));</field><field name="LINE26">        pins.digitalWritePin(DigitalPin.P13, leftRotation);</field><field name="LINE27" /><field name="LINE28">        //右电机 M2</field><field name="LINE29">        pins.analogWritePin(AnalogPin.P16, Math.abs(rightSpeed));</field><field name="LINE30">        pins.digitalWritePin(DigitalPin.P15, rightRotation);</field><field name="LINE31" /><field name="LINE32">        //添加时间控制</field><field name="LINE33">        if(time &lt; 0){</field><field name="LINE34">            time = 0;</field><field name="LINE35">        }</field><field name="LINE36">        </field><field name="LINE37">        let time_num = time*1000000;</field><field name="LINE38" /><field name="LINE39">        control.waitMicros(time_num);</field><field name="LINE40" /><field name="LINE41">        //左电机 M1</field><field name="LINE42">        pins.analogWritePin(AnalogPin.P14, 0);</field><field name="LINE43">        pins.digitalWritePin(DigitalPin.P13, 0);</field><field name="LINE44">        //右电机 M2</field><field name="LINE45">        pins.analogWritePin(AnalogPin.P16, 0);</field><field name="LINE46">        pins.digitalWritePin(DigitalPin.P15, 0);</field><field name="LINE47">        </field><field name="LINE48">        </field><field name="LINE49">    }</field><field name="LINE50" /><field name="LINE51">    /**</field><field name="LINE52">     * 播放音调</field><field name="LINE53">     */</field><field name="LINE54">    //% weight=89</field><field name="LINE55">    //% blockId="cruise_tone" block="Play Tone %tone| for %beatInfo"</field><field name="LINE56">    export function myPlayTone(tone:ToneHzTable, beatInfo:BeatList): void {</field><field name="LINE57" /><field name="LINE58">        if(beatInfo == BeatList.whole_beat){</field><field name="LINE59">            music.playTone(tone, music.beat(BeatFraction.Whole));</field><field name="LINE60" /><field name="LINE61">        }</field><field name="LINE62">       </field><field name="LINE63">        if(beatInfo == BeatList.half_beat){</field><field name="LINE64">            music.playTone(tone, music.beat(BeatFraction.Half));</field><field name="LINE65" /><field name="LINE66">        }</field><field name="LINE67">        </field><field name="LINE68">        if(beatInfo == BeatList.quarter_beat){</field><field name="LINE69">            music.playTone(tone, music.beat(BeatFraction.Quarter));</field><field name="LINE70" /><field name="LINE71">        }</field><field name="LINE72" /><field name="LINE73">        if(beatInfo == BeatList.double_beat){</field><field name="LINE74">            music.playTone(tone, music.beat(BeatFraction.Double));</field><field name="LINE75" /><field name="LINE76">        }</field><field name="LINE77" /><field name="LINE78">        </field><field name="LINE79">        if(beatInfo == BeatList.eighth_beat){</field><field name="LINE80">            music.playTone(tone, music.beat(BeatFraction.Eighth));</field><field name="LINE81" /><field name="LINE82">        }</field><field name="LINE83" /><field name="LINE84">        if(beatInfo == BeatList.breve_beat){</field><field name="LINE85">            music.playTone(tone, music.beat(BeatFraction.Breve));</field><field name="LINE86" /><field name="LINE87">        }</field><field name="LINE88">        //1、16不行</field><field name="LINE89">        // if(beatInfo == BeatList.sixteen_beat){</field><field name="LINE90">        //     music.playTone(tone, music.beat(BeatFraction.SixTeenth));</field><field name="LINE91" /><field name="LINE92">        // }    </field><field name="LINE93">    }</field><field name="LINE94" /><field name="LINE95">    //% weight=79</field><field name="LINE96">    //% blockId="cruise_patrol" block="Line Tracer Detects %patrol"</field><field name="LINE97">    export function readPatrol(patrol:Patrol): boolean {</field><field name="LINE98" /><field name="LINE99">        // let p1 = pins.digitalReadPin(DigitalPin.P12);</field><field name="LINE100">        // let p2 = pins.digitalReadPin(DigitalPin.P11);</field><field name="LINE101" /><field name="LINE102">        if(patrol == Patrol.white_white){</field><field name="LINE103">            if(pins.digitalReadPin(DigitalPin.P12) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P11) == 1){</field><field name="LINE104">                return true;</field><field name="LINE105">            }else{</field><field name="LINE106">                return false;</field><field name="LINE107">            }</field><field name="LINE108">        }else if(patrol == Patrol.white_black){</field><field name="LINE109">            if(pins.digitalReadPin(DigitalPin.P12) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P11) == 0){</field><field name="LINE110">                return true;</field><field name="LINE111">            }else{</field><field name="LINE112">                return false;</field><field name="LINE113">            }</field><field name="LINE114">        }else if(patrol == Patrol.black_white){</field><field name="LINE115">            if(pins.digitalReadPin(DigitalPin.P12) == 0 &amp;&amp; pins.digitalReadPin(DigitalPin.P11) == 1){</field><field name="LINE116">                return true;</field><field name="LINE117">            }else{</field><field name="LINE118">                return false;</field><field name="LINE119">            }</field><field name="LINE120">        }else if(patrol == Patrol.black_black){</field><field name="LINE121">            if(pins.digitalReadPin(DigitalPin.P12) == 0 &amp;&amp; pins.digitalReadPin(DigitalPin.P11) == 0){</field><field name="LINE122">                return true;</field><field name="LINE123">            }else{</field><field name="LINE124">                return false;</field><field name="LINE125">            }</field><field name="LINE126">        }else{</field><field name="LINE127">            return false;</field><field name="LINE128">        }</field><field name="LINE129">    }</field><field name="LINE130" /><field name="LINE131">    //% blockId=cruise_sensor block="Ultrasonic Distance %unit"</field><field name="LINE132">    //% weight=69</field><field name="LINE133">    export function sensorDistance(unit: PingUnit, maxCmDistance = 500): number {</field><field name="LINE134">        // send pulse</field><field name="LINE135">        //pins.setPull(DigitalPin.P2, PinPullMode.PullNone);</field><field name="LINE136">        //pins.setPull(DigitalPin.P2, PinPullMode.PullUp);</field><field name="LINE137">        //pins.setPull(DigitalPin.P5, PinPullMode.PullUp);</field><field name="LINE138" /><field name="LINE139">        //pins.digitalWritePin(DigitalPin.P2, 0);</field><field name="LINE140">        //control.waitMicros(4);</field><field name="LINE141">        //pins.digitalWritePin(DigitalPin.P2, 1);</field><field name="LINE142">        //control.waitMicros(10);</field><field name="LINE143">        //pins.digitalWritePin(DigitalPin.P2, 0);</field><field name="LINE144">        </field><field name="LINE145">        // read pulse</field><field name="LINE146">        //let d = pins.pulseIn(DigitalPin.P5, PulseValue.High, maxCmDistance * 58);</field><field name="LINE147">        //console.log("Distance: " + d/58);</field><field name="LINE148">        </field><field name="LINE149">        //basic.pause(50)</field><field name="LINE150" /><field name="LINE151">        //switch (unit) {</field><field name="LINE152">            //case PingUnit.Centimeters: return d / 58;</field><field name="LINE153">            //default: return d ;</field><field name="LINE154">        //}</field><field name="LINE155" /><field name="LINE156">         // send pulse</field><field name="LINE157">         pins.setPull(DigitalPin.P2, PinPullMode.PullNone);</field><field name="LINE158">         pins.digitalWritePin(DigitalPin.P2, 0);</field><field name="LINE159">         control.waitMicros(2);</field><field name="LINE160">         pins.digitalWritePin(DigitalPin.P2, 1);</field><field name="LINE161">         control.waitMicros(10);</field><field name="LINE162">         pins.digitalWritePin(DigitalPin.P2, 0);</field><field name="LINE163"> </field><field name="LINE164">         // read pulse</field><field name="LINE165">         const d = pins.pulseIn(DigitalPin.P2, PulseValue.High, maxCmDistance * 58);</field><field name="LINE166"> </field><field name="LINE167">         switch (unit) {</field><field name="LINE168">             case PingUnit.Centimeters: return Math.idiv(d, 58);</field><field name="LINE169">             default: return d ;</field><field name="LINE170"> }</field><field name="LINE171">    }</field><field name="LINE172" /><field name="LINE173" /><field name="LINE174">    /**</field><field name="LINE175">      * 红外线探测左、前、右是否有障碍物</field><field name="LINE176">      */</field><field name="LINE177">    //% blockId="cruise_IR" block="%IRDire| Obstacle"</field><field name="LINE178">    //% weight=68</field><field name="LINE179">    export function cruiseIR(IRDire:IRList): boolean {</field><field name="LINE180">        if(IRDire == IRList.front){</field><field name="LINE181">            if(pins.digitalReadPin(DigitalPin.P5) == 0){</field><field name="LINE182">                return true;</field><field name="LINE183">            }else{</field><field name="LINE184">                return false;</field><field name="LINE185">            }</field><field name="LINE186">        }else if(IRDire == IRList.left){</field><field name="LINE187">            if(pins.digitalReadPin(DigitalPin.P8) == 0){</field><field name="LINE188">                return true;</field><field name="LINE189">            }else{</field><field name="LINE190">                return false;</field><field name="LINE191">            }</field><field name="LINE192">        }else if(IRDire == IRList.right){</field><field name="LINE193">            if(pins.digitalReadPin(DigitalPin.P2) == 0){</field><field name="LINE194">                return true;</field><field name="LINE195">            }else{</field><field name="LINE196">                return false;</field><field name="LINE197">            }</field><field name="LINE198">        }else{</field><field name="LINE199">            return false;</field><field name="LINE200">        }</field><field name="LINE201">    }</field><field name="LINE202" /><field name="LINE203">    //% blockId=cruise_rgb block="Set LED %RgbValue| Colour %ColorValue"</field><field name="LINE204">    //% weight=59</field><field name="LINE205">    export function setRGB(RgbValue: RgbList, ColorValue:ColorList): void {</field><field name="LINE206">        </field><field name="LINE207">        if(ColorValue == ColorList.red){</field><field name="LINE208">            if(RgbValue == RgbList.rgb){</field><field name="LINE209">                neoStrip.showColor(neopixel.colors(NeoPixelColors.Red));</field><field name="LINE210">            }else{</field><field name="LINE211">                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Red));</field><field name="LINE212">            }</field><field name="LINE213">            </field><field name="LINE214">        }</field><field name="LINE215">        </field><field name="LINE216">        if(ColorValue == ColorList.orange){</field><field name="LINE217">            if(RgbValue == RgbList.rgb){</field><field name="LINE218">                neoStrip.showColor(neopixel.colors(NeoPixelColors.Orange));</field><field name="LINE219">            }else{</field><field name="LINE220">                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Orange));</field><field name="LINE221">            }</field><field name="LINE222">        }</field><field name="LINE223">        </field><field name="LINE224">        if(ColorValue == ColorList.yellow){</field><field name="LINE225">            if(RgbValue == RgbList.rgb){</field><field name="LINE226">                neoStrip.showColor(neopixel.colors(NeoPixelColors.Yellow));</field><field name="LINE227">            }else{</field><field name="LINE228">                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Yellow));</field><field name="LINE229">            }</field><field name="LINE230">        }</field><field name="LINE231">        </field><field name="LINE232">        if(ColorValue == ColorList.green){</field><field name="LINE233">            if(RgbValue == RgbList.rgb){</field><field name="LINE234">                neoStrip.showColor(neopixel.colors(NeoPixelColors.Green));</field><field name="LINE235">            }else{</field><field name="LINE236">                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Green));</field><field name="LINE237">            }</field><field name="LINE238">        }</field><field name="LINE239">        </field><field name="LINE240">        if(ColorValue == ColorList.blue){</field><field name="LINE241">            if(RgbValue == RgbList.rgb){</field><field name="LINE242">                neoStrip.showColor(neopixel.colors(NeoPixelColors.Blue));</field><field name="LINE243">            }else{</field><field name="LINE244">                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Blue));</field><field name="LINE245">            }</field><field name="LINE246">        }</field><field name="LINE247">        </field><field name="LINE248">        if(ColorValue == ColorList.indigo){</field><field name="LINE249">            if(RgbValue == RgbList.rgb){</field><field name="LINE250">                neoStrip.showColor(neopixel.colors(NeoPixelColors.Indigo));</field><field name="LINE251">            }else{</field><field name="LINE252">                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Indigo));</field><field name="LINE253">            }</field><field name="LINE254">        }</field><field name="LINE255">        </field><field name="LINE256">        if(ColorValue == ColorList.violet){</field><field name="LINE257">            if(RgbValue == RgbList.rgb){</field><field name="LINE258">                neoStrip.showColor(neopixel.colors(NeoPixelColors.Violet));</field><field name="LINE259">            }else{</field><field name="LINE260">                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Violet));</field><field name="LINE261">            }</field><field name="LINE262">        }</field><field name="LINE263">        </field><field name="LINE264">        if(ColorValue == ColorList.purple){</field><field name="LINE265">            if(RgbValue == RgbList.rgb){</field><field name="LINE266">                neoStrip.showColor(neopixel.colors(NeoPixelColors.Purple));</field><field name="LINE267">            }else{</field><field name="LINE268">                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Purple));</field><field name="LINE269">            }</field><field name="LINE270">        }</field><field name="LINE271">        </field><field name="LINE272">        if(ColorValue == ColorList.white){</field><field name="LINE273">            if(RgbValue == RgbList.rgb){</field><field name="LINE274">                neoStrip.showColor(neopixel.colors(NeoPixelColors.White));</field><field name="LINE275">            }else{</field><field name="LINE276">                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.White));</field><field name="LINE277">            }</field><field name="LINE278">        }</field><field name="LINE279">        </field><field name="LINE280">        if(ColorValue == ColorList.black){</field><field name="LINE281">            if(RgbValue == RgbList.rgb){</field><field name="LINE282">                neoStrip.showColor(neopixel.colors(NeoPixelColors.Black));</field><field name="LINE283">            }else{</field><field name="LINE284">                neoStrip.setPixelColor(RgbValue, neopixel.colors(NeoPixelColors.Black));</field><field name="LINE285">            }</field><field name="LINE286">        }</field><field name="LINE287" /><field name="LINE288">        neoStrip.show();</field><field name="LINE289">        </field><field name="LINE290">    }</field><field name="LINE291" /><field name="LINE292">   /**</field><field name="LINE293">     * Clear leds.</field><field name="LINE294">     */</field><field name="LINE295">   //% blockId="cruise_neo_clear" block="Clear all"</field><field name="LINE296">   //% weight=55</field><field name="LINE297">   export function neoClear(): void {</field><field name="LINE298">       neoStrip.showColor(neopixel.colors(NeoPixelColors.Black));</field><field name="LINE299">   }</field><field name="LINE300" /><field name="LINE301">    /**</field><field name="LINE302">      * Shows a rainbow pattern on all LEDs.</field><field name="LINE303">      */</field><field name="LINE304">    //% blockId="cruise_neo_rainbow" block="Show Rainbow"</field><field name="LINE305">    //% weight=70</field><field name="LINE306">    export function neoRainbow(): void {</field><field name="LINE307">        neoStrip.showRainbow(1, 360);</field><field name="LINE308">    }</field><field name="LINE309" /><field name="LINE310">     //% blockId=tape_rgb block="Set Pull Pin %pin| to %way"</field><field name="LINE311">    //% weight=49</field><field name="LINE312">    export function setTapeLights(pin: DigitalPin, way: PinList): void {</field><field name="LINE313" /><field name="LINE314">        if(way = PinList.up_pull){</field><field name="LINE315">            pins.setPull(pin, PinPullMode.PullUp);</field><field name="LINE316">        }else if(way = PinList.down_pull){</field><field name="LINE317">            pins.setPull(pin, PinPullMode.PullDown);</field><field name="LINE318">        }else{</field><field name="LINE319">            pins.setPull(pin, PinPullMode.PullNone);</field><field name="LINE320">        }</field><field name="LINE321" /><field name="LINE322">        </field><field name="LINE323">        </field><field name="LINE324">}</field><field name="LINE325">    /**</field><field name="LINE326">    * Help goes here.</field><field name="LINE327">    */</field><field name="LINE328">    //% blockId=mu_init block="Init%id|Interface%port"</field><field name="LINE329">    //% weight=100 </field><field name="LINE330">    //% shim=muvs::begin</field><field name="LINE331">    //% group="Settings"</field><field name="LINE332">    export function begin(id: SENSORS, port: PORT) {</field><field name="LINE333">        return</field><field name="LINE334">    }</field><field name="LINE335">    //% blockId=MU_reset block="%id|Reset to Default"</field><field name="LINE336">    //% weight=99</field><field name="LINE337">    //% shim=muvs::reset</field><field name="LINE338">    //% group="Settings"</field><field name="LINE339">    export function reset(id: SENSORS) {</field><field name="LINE340">        return</field><field name="LINE341">    }</field><field name="LINE342" /><field name="LINE343">    //% blockId=MU_set_led block="%id|LED %led|when detect %detected_color|when undetect %undetected_color"</field><field name="LINE344">    //% level.defl=1 level.min=0 level.max=15</field><field name="LINE345">    //% weight=98 inlineInputMode=inline</field><field name="LINE346">    //% shim=muvs::set_led</field><field name="LINE347">    //% group="Settings" advanced=true</field><field name="LINE348">    export function set_led(id: SENSORS, led: LEDS, detected_color: LED_COLOR_TYPE, undetected_color: LED_COLOR_TYPE) {</field><field name="LINE349">        return</field><field name="LINE350">    }</field><field name="LINE351" /><field name="LINE352">    //% blockId=MU_VisionBegin block="%id|%enable|Algorithm%type"</field><field name="LINE353">    //% weight=97</field><field name="LINE354">    //% shim=muvs::VisionBegin</field><field name="LINE355">    //% group="Settings"</field><field name="LINE356">    export function VisionBegin(id: SENSORS, enable: ENABLES, type: VISION_TYPE) {</field><field name="LINE357">        return</field><field name="LINE358">    }</field><field name="LINE359">    //% blockId=MU_set_level block="%id|Set Algorithm%VISION_TYPE|Level%level"</field><field name="LINE360">    //% weight=96</field><field name="LINE361">    //% shim=muvs::set_level</field><field name="LINE362">    //% group="Settings" advanced=true</field><field name="LINE363">    export function set_level(id: SENSORS, type: VISION_TYPE, level: VisionLevel) {</field><field name="LINE364">        return</field><field name="LINE365">    }</field><field name="LINE366">    //% blockId=MU_set_zoom block="%id|Digital Zoom%level"</field><field name="LINE367">    //% weight=95</field><field name="LINE368">    //% shim=muvs::set_zoom</field><field name="LINE369">    //% group="Settings" advanced=true</field><field name="LINE370">    export function set_zoom(id: SENSORS, level: VisionZoom) {</field><field name="LINE371">        return</field><field name="LINE372">    }</field><field name="LINE373" /><field name="LINE374">    //% blockId=MU_set_baudrate block="%id|Set Baudrate%baudrate"</field><field name="LINE375">    //% weight=94</field><field name="LINE376">    //% shim=muvs::set_baudrate</field><field name="LINE377">    //% group="Settings" advanced=true</field><field name="LINE378">    export function set_baudrate(id: SENSORS, baud: BaudRate2) {</field><field name="LINE379">        return</field><field name="LINE380">    }</field><field name="LINE381">    //% blockId=MU_set_awb block="%id|Set white balance%level"</field><field name="LINE382">    //% weight=93</field><field name="LINE383">    //% shim=muvs::set_WB</field><field name="LINE384">    //% group="Settings" advanced=true</field><field name="LINE385">    export function set_WB(id: SENSORS, awb: WBMODE) {</field><field name="LINE386">        return</field><field name="LINE387">    }</field><field name="LINE388">    //% block="%id|High FPS mode$on"</field><field name="LINE389">    //% shim=muvs::onOff</field><field name="LINE390">    //% on.shadow="toggleOnOff" group="Settings" advanced=true</field><field name="LINE391">    export function onOff(id: SENSORS, on: boolean) {</field><field name="LINE392">        return</field><field name="LINE393">    }</field><field name="LINE394">    //% block="%id|Is detected%type" color="#2E8B57"</field><field name="LINE395">    //% shim=muvs::detected</field><field name="LINE396">    //% group="Functions"</field><field name="LINE397">    export function detected(id: SENSORS, type: VISION_TYPE): boolean {</field><field name="LINE398">        return true</field><field name="LINE399">    }</field><field name="LINE400">    //% block="%id|Is detected  Color Recognize x=%x|y=%y" color="#2E8B57"</field><field name="LINE401">    //% shim=muvs::MuVs2GetColorRCGLabel</field><field name="LINE402">    //% group="Functions"</field><field name="LINE403">    export function MuVs2GetColorRCGLabel(id: SENSORS, x: number, y: number): boolean {</field><field name="LINE404">        return true</field><field name="LINE405">    }</field><field name="LINE406">    //% block="%id|Is detected  Color Detect Color=%color" color="#2E8B57"</field><field name="LINE407">    //% shim=muvs::MuVs2GetColorDetectLabel</field><field name="LINE408">    //% group="Functions"</field><field name="LINE409">    export function MuVs2GetColorDetectLabel(id: SENSORS, label: COLOR_TYPE): boolean {</field><field name="LINE410">        return true</field><field name="LINE411">    }</field><field name="LINE412">    //% block="Get%id|Algorithm%type|%item" color="#2E8B57"</field><field name="LINE413">    //% shim=muvs::get_value</field><field name="LINE414">    //% group="Functions"</field><field name="LINE415">    export function get_value(id: SENSORS, type: _VISION_TYPE, item: Params): number {</field><field name="LINE416">        return 0</field><field name="LINE417">    }</field><field name="LINE418">    //% block="Get%id| Color Recognize|%item" color="#2E8B57"</field><field name="LINE419">    //% shim=muvs::get_color_value</field><field name="LINE420">    //% group="Functions"</field><field name="LINE421">    export function get_color_value(id: SENSORS, item: ColorParams): number {</field><field name="LINE422">        return 0</field><field name="LINE423">    }</field><field name="LINE424">    //% block="Get%id| Shape Card =%type" color="#2E8B57"</field><field name="LINE425">    //% shim=muvs::get_shape_card_type</field><field name="LINE426">    //% group="Functions"</field><field name="LINE427">    export function get_shape_card_type(id: SENSORS, type: SHAPE_CARD_TYPE): boolean {</field><field name="LINE428">        return true</field><field name="LINE429">    }</field><field name="LINE430">    //% block="Get%id| Traffic Card =%type" color="#2E8B57"</field><field name="LINE431">    //% shim=muvs::get_traffic_card_type</field><field name="LINE432">    //% group="Functions"</field><field name="LINE433">    export function get_traffic_card_type(id: SENSORS, type: TRAFFIC_CARD_TYPE): boolean {</field><field name="LINE434">        return true</field><field name="LINE435">    }</field><field name="LINE436">    //% block="Get%id| Number Card =%type" color="#2E8B57"</field><field name="LINE437">    //% shim=muvs::get_number_card_type</field><field name="LINE438">    //% group="Functions"</field><field name="LINE439">    export function get_number_card_type(id: SENSORS, type: NUM_CARD_TYPE): boolean {</field><field name="LINE440">        return true</field><field name="LINE441">    }</field><field name="LINE442">    //% block="Get%id|Algorithm  Color Recognize color =%color" color="#2E8B57"</field><field name="LINE443">    //% shim=muvs::get_color_recognize</field><field name="LINE444">    //% group="Functions"</field><field name="LINE445">    export function get_color_recognize(id: SENSORS, color: COLOR_TYPE): boolean {</field><field name="LINE446">        return true</field><field name="LINE447">    }</field><field name="LINE448">}</field><comment id="undefined" w="160" h="80" pinned="false">% weight=99 icon="\uf0e7" color=#1B80C4</comment><next><block type="mu_init"><field name="id">SENSORS.MU00</field><field name="port">PORT.I2C</field><next><block type="MU_VisionBegin"><field name="id">SENSORS.MU00</field><field name="enable">ENABLES.enable</field><field name="type">VISION_TYPE.VISION_NUM_CARD_DETECT</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="device_forever" y="0" x="1128"><statement name="HANDLER"><block type="controls_if"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="CruiseBit_detected"><field name="id">SENSORS.MU00</field><field name="type">VISION_TYPE.VISION_NUM_CARD_DETECT</field></block></value><statement name="DO0"><block type="basic_show_icon"><field name="i">IconNames.Heart</field></block></statement></block></statement></block><block disabled="true" type="CruiseBit_detected" y="0" x="1697"><field name="id">SENSORS.MU00</field><field name="type">VISION_TYPE.VISION_COLOR_DETECT</field></block><block type="device_forever" y="37545" x="-24"><statement name="HANDLER"><block type="controls_if"><value name="IF0"><shadow id="x7?~Hai2P5=G);_IJbEm" type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="CruiseBit_get_number_card_type"><field name="id">SENSORS.MU00</field><field name="type">NUM_CARD_TYPE.NUM_CARD_1</field></block></value><statement name="DO0"><block type="basic_show_icon"><field name="i">IconNames.Sword</field></block></statement><next><block type="controls_if"><mutation else="1" /><value name="IF0"><shadow id="~~Bc]#)o#dfJ9?P#=Kr_" type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="CruiseBit_get_number_card_type"><field name="id">SENSORS.MU00</field><field name="type">NUM_CARD_TYPE.NUM_CARD_7</field></block></value><statement name="DO0"><block type="basic_show_icon"><field name="i">IconNames.Meh</field></block></statement><statement name="ELSE"><block type="basic_show_icon"><field name="i">IconNames.Square</field></block></statement></block></next></block></statement></block></xml>